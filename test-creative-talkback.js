/**
 * Test f√ºr Creative Talkback System
 * Testet die "Hey Otto" Funktionalit√§t f√ºr kreative KI-Unterst√ºtzung
 */

const { 
  detectTalkbackTriggers, 
  processCreativeTalkback, 
  formatTalkbackResponses,
  testCreativeTalkback 
} = require('./src/utils/creative-talkback');

async function runTalkbackTests() {
  console.log("ü§ñ === OTTO CREATIVE TALKBACK TESTS ===\n");
  
  // Test-Szenarien f√ºr verschiedene Otto-Anfragen
  const testScenarios = [
    {
      name: "Creative Briefing mit Otto-Anfragen",
      transcript: `
        Hallo Team, wir starten heute mit dem Creative Briefing f√ºr Mercedes EQS.
        Die Zielgruppe sind Premium-Kunden zwischen 35 und 55 Jahren.
        Sie legen Wert auf Luxus aber auch auf Nachhaltigkeit.
        Hey Otto, hast du eine Idee f√ºr die Hauptbotschaft der Kampagne?
        Wir m√ºssen Elektromobilit√§t mit Premium-Gef√ºhl verbinden.
        Das Budget betr√§gt 2,5 Millionen Euro f√ºr die gesamte Kampagne.
        Otto, welche visuellen Elemente k√∂nnten das unterst√ºtzen?
        Ich denke an minimalistische Designs mit nat√ºrlichen Elementen.
      `
    },
    {
      name: "Design Review mit kreativen Fragen",
      transcript: `
        Hier ist der erste Entwurf f√ºr das Mercedes Logo-Layout.
        Die Typografie wirkt noch etwas schwer, finde ich.
        Otto, wie k√∂nnten wir das eleganter gestalten?
        Vielleicht sollten wir eine d√ºnnere Schrift verwenden?
        Die Farbpalette gef√§llt mir schon gut - das Gr√ºn symbolisiert Nachhaltigkeit.
        Hey Otto, welche Designtrends passen zu Elektroautos?
        Wir wollen modern aber zeitlos wirken.
      `
    },
    {
      name: "Brainstorming Session mit Otto-Input",
      transcript: `
        Brainstorming f√ºr die Mercedes EQS Social Media Kampagne.
        Wir brauchen Ideen f√ºr Instagram und TikTok Content.
        Die Gen-Z soll auch erreicht werden, nicht nur die klassische Zielgruppe.
        Otto, was sind aktuell die viralsten Content-Formate?
        Ich denke an Challenges oder Behind-the-Scenes Content.
        Otto, hilf uns bei innovativen Kampagnen-Ideen f√ºr Elektroautos.
        Sustainability ist wichtig, aber nicht langweilig.
      `
    },
    {
      name: "Client Presentation Vorbereitung",
      transcript: `
        Morgen pr√§sentieren wir dem Mercedes Marketing Team unsere Konzepte.
        Wir haben drei verschiedene Ans√§tze entwickelt.
        Der erste fokussiert auf technische Innovation.
        Otto, wie strukturieren wir am besten die Pr√§sentation?
        Ich bin mir unsicher, mit welchem Konzept wir anfangen sollten.
        Hey Otto, was sind die wichtigsten Argumente f√ºr Elektromobilit√§t?
        Die Kunden m√ºssen emotional abgeholt werden.
      `
    }
  ];
  
  console.log("1. üîç Trigger Detection Tests");
  console.log("‚îÄ".repeat(40));
  
  for (const scenario of testScenarios) {
    console.log(`\nüß™ Testing: ${scenario.name}`);
    
    const triggers = detectTalkbackTriggers(scenario.transcript);
    
    console.log(`   üéØ Erkannte Trigger: ${triggers.length}`);
    
    if (triggers.length > 0) {
      triggers.forEach((trigger, index) => {
        console.log(`   ${index + 1}. "${trigger.originalLine}"`);
        console.log(`      Context: ${trigger.context.meetingType} - ${trigger.context.currentTopic}`);
      });
    } else {
      console.log("   ‚ö†Ô∏è Keine Otto-Anfragen erkannt");
    }
  }
  
  console.log("\n\n2. ü§ñ Creative Response Generation Test");
  console.log("‚îÄ".repeat(40));
  
  // Teste nur das erste Szenario f√ºr Response-Generierung
  const firstScenario = testScenarios[0];
  console.log(`\nüß™ Testing: ${firstScenario.name}`);
  
  const responses = await processCreativeTalkback(firstScenario.transcript);
  
  if (responses.length > 0) {
    console.log(`‚úÖ ${responses.length} Antworten generiert:`);
    
    const formatted = formatTalkbackResponses(responses, 'plain');
    console.log(formatted);
  } else {
    console.log("‚ùå Keine Antworten generiert (API-Key pr√ºfen)");
  }
  
  console.log("\n3. üìä Pattern Recognition Test");
  console.log("‚îÄ".repeat(40));
  
  // Teste verschiedene Otto-Trigger-Patterns
  const triggerPatterns = [
    "Hey Otto, hast du eine Idee?",
    "Otto, wie k√∂nnten wir das verbessern?", 
    "Otto, welche Trends siehst du?",
    "Frag Otto mal nach seiner Meinung",
    "Otto, hilf uns bei diesem Problem",
    "Hey Otto, was denkst du dazu?",
    "Otto, hast du Inspiration f√ºr uns?",
    "Otto, welche kreativen Ans√§tze gibt es?"
  ];
  
  for (const pattern of triggerPatterns) {
    const testTranscript = `Das ist ein Test. ${pattern} Das war der Test.`;
    const triggers = detectTalkbackTriggers(testTranscript);
    
    if (triggers.length > 0) {
      console.log(`‚úÖ "${pattern}" - Erkannt`);
    } else {
      console.log(`‚ùå "${pattern}" - Nicht erkannt`);
    }
  }
  
  console.log("\n4. üé® Context Analysis Test");
  console.log("‚îÄ".repeat(40));
  
  const contextTestTranscript = `
    Wir arbeiten an einer Nike Kampagne f√ºr den neuen Air Max.
    Die Zielgruppe sind Sportbegeisterte zwischen 18 und 35 Jahren.
    Das Design soll modern und dynamisch sein.
    Hey Otto, welche Farben w√ºrden am besten funktionieren?
    Wir verwenden Figma f√ºr die Prototypen.
  `;
  
  const contextTriggers = detectTalkbackTriggers(contextTestTranscript);
  
  if (contextTriggers.length > 0) {
    const context = contextTriggers[0].context;
    console.log("üìã Extrahierter Kontext:");
    console.log(`   Meeting-Typ: ${context.meetingType}`);
    console.log(`   Aktuelles Thema: ${context.currentTopic}`);
    console.log(`   Entit√§ten: ${context.entities.map(e => e.name).join(', ')}`);
    console.log(`   Kontext davor: "${context.before}"`);
    console.log(`   Kontext danach: "${context.after}"`);
  }
  
  console.log("\n5. üìù Format Test");
  console.log("‚îÄ".repeat(40));
  
  if (responses.length > 0) {
    console.log("üî∏ Markdown Format:");
    const markdownFormat = formatTalkbackResponses(responses, 'markdown');
    console.log(markdownFormat.substring(0, 200) + "...");
    
    console.log("\nüî∏ HTML Format:");
    const htmlFormat = formatTalkbackResponses(responses, 'html');
    console.log(htmlFormat.substring(0, 200) + "...");
  }
  
  console.log("\n6. ‚ö° Performance Test");
  console.log("‚îÄ".repeat(40));
  
  const performanceTestTranscript = "Hey Otto, teste die Performance. Otto, wie schnell bist du?";
  
  console.time("Trigger Detection Performance");
  for (let i = 0; i < 1000; i++) {
    detectTalkbackTriggers(performanceTestTranscript);
  }
  console.timeEnd("Trigger Detection Performance");
  
  console.log("‚úÖ 1000 Trigger-Erkennungen durchgef√ºhrt");
  
  console.log("\nü§ñ === CREATIVE TALKBACK TESTS ABGESCHLOSSEN ===");
  console.log("\nüìã Zusammenfassung:");
  console.log("‚úÖ Trigger-Erkennung funktioniert");
  console.log("‚úÖ Context-Extraktion funktioniert");
  console.log("‚úÖ Pattern-Recognition funktioniert");
  console.log("‚úÖ Performance ist gut");
  
  if (responses.length > 0) {
    console.log("‚úÖ KI-Response-Generierung funktioniert");
  } else {
    console.log("‚ö†Ô∏è KI-Response-Generierung ben√∂tigt API-Key");
  }
  
  console.log("\nüöÄ Creative Talkback ist bereit f√ºr den Einsatz!");
}

// Erweiterte Integration Tests
async function testTalkbackIntegration() {
  console.log("\nüîó Integration mit bestehenden Systemen testen...");
  
  try {
    // Test mit Summary Templates
    const { selectBestTemplate } = require('./src/utils/summary-templates');
    const testTranscript = "Hey Otto, welche Briefing-Vorlage sollten wir verwenden?";
    const template = selectBestTemplate(testTranscript);
    console.log(`‚úÖ Summary Template Integration: ${template}`);
    
    // Test mit Creative Agency Templates 
    const { templateSelector } = require('./src/utils/creative-agency-templates');
    const creativeTemplate = templateSelector.detectTemplate(testTranscript);
    console.log(`‚úÖ Creative Template Integration: ${creativeTemplate}`);
    
    // Test Gemini Integration
    const fs = require('fs');
    const configPath = './config.json';
    if (fs.existsSync(configPath)) {
      const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
      if (config.KITEGG_API_KEY) {
        console.log("‚úÖ Kitegg API Integration verf√ºgbar");
      } else {
        console.log("‚ö†Ô∏è Kitegg API-Key fehlt");
      }
    }
    
  } catch (error) {
    console.log("‚ùå Integration Test Fehler:", error.message);
  }
}

// Main execution
if (require.main === module) {
  (async () => {
    try {
      await runTalkbackTests();
      await testTalkbackIntegration();
    } catch (error) {
      console.error("‚ùå Creative Talkback Tests fehlgeschlagen:", error);
      process.exit(1);
    }
  })();
}

module.exports = {
  runTalkbackTests,
  testTalkbackIntegration
};
