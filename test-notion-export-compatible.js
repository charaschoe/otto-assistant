/**
 * Test f√ºr kompatible Notion Export Funktionalit√§t
 * Verwendet nur existierende Database-Properties
 */

const { exportToNotionCompatible } = require('./src/integrations/notion-export-compatible');

async function testCompatibleNotionExport() {
  console.log("üéØ === KOMPATIBLE NOTION EXPORT TEST ===\n");
  
  const testData = {
    transcript: `
      Creative Briefing f√ºr Mercedes EQS Kampagne.
      Zielgruppe: Premium-Kunden, 35-55 Jahre, umweltbewusst.
      Hauptbotschaft: Luxus trifft Nachhaltigkeit.
      Deliverables: TV-Spot, Digital Ads, Print, Landing Page.
      Budget: 2,5 Millionen Euro.
      Team: Sarah (Creative Director), Max (Art Director), Lisa (Copywriter).
      Timeline: Launch M√§rz 2025, Produktion startet Januar.
      Client: Mercedes-Benz Deutschland GmbH.
    `,
    summary: "Creative Briefing f√ºr Mercedes EQS Elektro-Kampagne - Premium-Zielgruppe, Luxus meets Nachhaltigkeit, Launch M√§rz 2025",
    entities: ['Mercedes-Benz', 'EQS', 'Kampagne', 'Premium', 'TV-Spot', 'Sarah', 'Max', 'Lisa'],
    entityEmojis: { 
      'Mercedes-Benz': 'üöó', 
      'EQS': '‚ö°', 
      'Kampagne': 'üì¢',
      'Premium': 'üíé',
      'TV-Spot': 'üì∫',
      'Sarah': 'üë©‚Äçüíº',
      'Max': 'üë®‚Äçüé®',
      'Lisa': '‚úçÔ∏è'
    }
  };
  
  console.log("üìã Test-Szenario: Mercedes EQS Creative Briefing");
  console.log("‚îÄ".repeat(50));
  console.log(`üìù Transkript-L√§nge: ${testData.transcript.length} Zeichen`);
  console.log(`üè∑Ô∏è Entit√§ten: ${testData.entities.length} erkannt`);
  console.log(`üìä Summary: ${testData.summary}\n`);
  
  try {
    console.log("üìä Starte kompatiblen Notion Export...");
    
    const result = await exportToNotionCompatible(
      testData.transcript,
      testData.summary,
      testData.entities,
      testData.entityEmojis,
      { templateType: 'creative_briefing' }
    );
    
    if (result) {
      console.log("\n‚úÖ NOTION EXPORT ERFOLGREICH!");
      console.log(`üîó Page URL: ${result}`);
      
      // Extrahiere Page-ID aus URL f√ºr weitere Tests
      const pageIdMatch = result.match(/([a-f0-9]{32})/);
      if (pageIdMatch) {
        console.log(`üìÑ Page ID: ${pageIdMatch[1]}`);
      }
      
      console.log("\nüéâ Die Session wurde erfolgreich in deine Notion Database exportiert!");
      console.log("üí° Du findest sie in deiner 'OTTO Table' Database.");
      
    } else {
      console.log("\n‚ùå NOTION EXPORT FEHLGESCHLAGEN");
      console.log("‚ö†Ô∏è M√∂gliche Ursachen:");
      console.log("   - API-Keys in config.json pr√ºfen");
      console.log("   - NOTION_API_KEY und NOTION_DATABASE_ID korrekt?");
      console.log("   - Netzwerkverbindung pr√ºfen");
      console.log("   - Database-Berechtigungen pr√ºfen");
      console.log("   - Integration mit Database geteilt?");
    }
    
  } catch (error) {
    console.log("\n‚ùå NOTION EXPORT FEHLER:");
    console.log(`   ${error.message}`);
    
    if (error.message.includes('API') || error.message.includes('401') || error.message.includes('403')) {
      console.log("\nüîß Troubleshooting:");
      console.log("1. Notion Integration pr√ºfen: https://www.notion.so/my-integrations");
      console.log("2. Database mit Integration teilen");
      console.log("3. Korrekte Berechtigungen setzen (Read/Write)");
      console.log("4. API-Key und Database-ID in config.json pr√ºfen");
    }
    
    if (error.message.includes('404')) {
      console.log("\nüîß Database-Problem:");
      console.log("1. Database-ID korrekt?");
      console.log("2. Database existiert noch?");
      console.log("3. Zugriff auf Database vorhanden?");
    }
  }
  
  console.log("\nüéØ === KOMPATIBLE NOTION EXPORT TEST ABGESCHLOSSEN ===");
}

// Zus√§tzlicher Test zum Vergleich der Ans√§tze
async function compareExportMethods() {
  console.log("\nüîÑ === VERGLEICH: ORIGINAL vs KOMPATIBEL ===\n");
  
  const testData = {
    transcript: "Test-Session f√ºr Vergleich der Export-Methoden.",
    summary: "Kurzer Test zum Vergleich",
    entities: ['Test', 'Vergleich'],
    entityEmojis: { 'Test': 'üß™', 'Vergleich': 'üîÑ' }
  };
  
  console.log("1Ô∏è‚É£ Original Export (erwartet Fehler):");
  try {
    const { exportToNotion } = require('./src/integrations/notion-export');
    const originalResult = await exportToNotion(
      testData.transcript,
      testData.summary,
      testData.entities,
      testData.entityEmojis,
      { templateType: 'creative_briefing' }
    );
    
    if (originalResult) {
      console.log("   ‚úÖ Original Export erfolgreich (unerwartet!)");
    } else {
      console.log("   ‚ùå Original Export fehlgeschlagen (erwartet)");
    }
  } catch (error) {
    console.log("   ‚ùå Original Export Fehler (erwartet):", error.message.substring(0, 100) + '...');
  }
  
  console.log("\n2Ô∏è‚É£ Kompatible Export (erwartet Erfolg):");
  try {
    const compatibleResult = await exportToNotionCompatible(
      testData.transcript,
      testData.summary,
      testData.entities,
      testData.entityEmojis,
      { templateType: 'creative_briefing' }
    );
    
    if (compatibleResult) {
      console.log("   ‚úÖ Kompatible Export erfolgreich!");
      console.log(`   üîó ${compatibleResult}`);
    } else {
      console.log("   ‚ùå Kompatible Export fehlgeschlagen");
    }
  } catch (error) {
    console.log("   ‚ùå Kompatible Export Fehler:", error.message.substring(0, 100) + '...');
  }
  
  console.log("\nüí° FAZIT:");
  console.log("Die kompatible Version sollte funktionieren, weil sie:");
  console.log("- Zuerst die verf√ºgbaren Properties der Database pr√ºft");
  console.log("- Nur existierende Properties verwendet");
  console.log("- Flexibel mit verschiedenen Database-Strukturen umgeht");
}

// Main execution
if (require.main === module) {
  (async () => {
    try {
      await testCompatibleNotionExport();
      await compareExportMethods();
    } catch (error) {
      console.error("‚ùå Test fehlgeschlagen:", error);
      process.exit(1);
    }
  })();
}

module.exports = {
  testCompatibleNotionExport,
  compareExportMethods
};
